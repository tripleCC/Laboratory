// Copyright (c) (2014-2023) Apple Inc. All rights reserved.
//
// corecrypto is licensed under Apple Inc.â€™s Internal Use License Agreement (which
// is contained in the License.txt file distributed with corecrypto) and only to
// people who accept that license. IMPORTANT:  Any license rights granted to you by
// Apple Inc. (if any) are limited to internal use within your organization only on
// devices and computers you own or control, for the sole purpose of verifying the
// security characteristics and correct functioning of the Apple Software.  You may
// not, directly or indirectly, redistribute the Apple Software or any portions thereof.

PRODUCT_NAME = $(TARGET_NAME)

SDKROOT = macosx.internal
MACOSX_DEPLOYMENT_TARGET = 13.0
IPHONEOS_DEPLOYMENT_TARGET = 16.0
WATCHOS_DEPLOYMENT_TARGET = 9.0

SUPPORTED_PLATFORMS = iphonesimulator iphoneos macosx watchos watchsimulator appletvos appletvsimulator driverkit

HEADER_SEARCH_PATHS = $(SRCROOT)/cc $(SRCROOT)/ccmode $(SRCROOT)/cccmac $(SRCROOT)/ccrng $(SRCROOT)/cc_fips $(SRCROOT)/ccec25519 $(TOOLCHAIN_DIR)/usr/include

// See below for SDK_INSTALL_ROOT
LIBRARY_SEARCH_PATHS = $(SDK_INSTALL_ROOT)/usr/lib/system

GCC_C_LANGUAGE_STANDARD = gnu99

ONLY_ACTIVE_ARCH[config=Debug] = YES

ALWAYS_SEARCH_USER_PATHS = NO

ENABLE_STRICT_OBJC_MSGSEND = YES

GCC_OPTIMIZATION_LEVEL[config=Debug] = 0
GCC_OPTIMIZATION_LEVEL[config=Release] = s

GCC_NO_COMMON_BLOCKS = YES

DEAD_CODE_STRIPPING = YES
COPY_PHASE_STRIP[config=Debug]  = NO
STRIP_INSTALLED_PRODUCT[config=Debug]  = NO

CODE_SIGN_IDENTITY = -
CODE_SIGN_STYLE = Automatic

ENABLE_TESTABILITY[config=Debug] = YES

GCC_PREPROCESSOR_DEFINITIONS = ENABLE_CRYPTOKIT_PRIVATE_DEFINITIONS=1 DISABLE_INTERNAL_VLAS=1 __STDC_WANT_LIB_EXT1__=1
GCC_PREPROCESSOR_DEFINITIONS[config=Debug] = ${inherited} DEBUG=1
GCC_PREPROCESSOR_DEFINITIONS[config=Release] = ${inherited} NDEBUG

GCC_TREAT_WARNINGS_AS_ERRORS = YES
GCC_TREAT_WARNINGS_AS_ERRORS[config=Release] = NO

CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES
CLANG_WARN_DOCUMENTATION_COMMENTS = YES
CLANG_WARN_EMPTY_BODY = YES
GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES
GCC_WARN_SHADOW = YES
CLANG_WARN_BOOL_CONVERSION = YES
CLANG_WARN_CONSTANT_CONVERSION = YES
GCC_WARN_64_TO_32_BIT_CONVERSION = YES
CLANG_WARN_ENUM_CONVERSION = YES
CLANG_WARN_INT_CONVERSION = YES
CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES
CLANG_WARN_IMPLICIT_SIGN_CONVERSION = YES
CLANG_WARN_INFINITE_RECURSION = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_MISSING_PARENTHESES = YES
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES
GCC_WARN_ABOUT_MISSING_NEWLINE = YES
GCC_WARN_SIGN_COMPARE = YES
CLANG_WARN_STRICT_PROTOTYPES = YES
CLANG_WARN_COMMA = YES
CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES
GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS = YES
GCC_WARN_UNINITIALIZED_AUTOS = YES
CLANG_WARN_UNREACHABLE_CODE = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_LABEL = YES
GCC_WARN_UNUSED_PARAMETER = YES
GCC_WARN_UNUSED_VALUE = YES
GCC_WARN_UNUSED_VARIABLE = YES
CLANG_WARN_RANGE_LOOP_ANALYSIS = YES
CLANG_WARN_SUSPICIOUS_MOVE = YES
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_OBJC_LITERAL_CONVERSION = YES
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES
GCC_WARN_UNDECLARED_SELECTOR = YES
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES

RUN_CLANG_STATIC_ANALYZER = YES
CLANG_STATIC_ANALYZER_MODE = deep
CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES
CLANG_ANALYZER_NONNULL = YES
CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES

SDK_INSTALL_ROOT[sdk=driverkit*] = $(DRIVERKITROOT)
SDK_INSTALL_HEADERS_ROOT[sdk=driverkit*] = $(SDK_INSTALL_ROOT)/$(SDK_RUNTIME_HEADERS_PREFIX)
SDK_RUNTIME_HEADERS_PREFIX = Runtime

SYSTEM_HEADER_SEARCH_PATHS[sdk=driverkit*] = $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/usr/local/include $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/usr/include

SYSTEM_FRAMEWORK_SEARCH_PATHS[sdk=driverkit*] = $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/System/Library/PrivateFrameworks $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/System/Library/Frameworks

CORECRYPTO_TRIVIAL_AUTO_VAR_INIT_ZERO = -ftrivial-auto-var-init=zero
CORECRYPTO_TRIVIAL_AUTO_VAR_INIT_PATTERN = -ftrivial-auto-var-init=pattern
CORECRYPTO_TRIVIAL_AUTO_VAR_INIT = $(CORECRYPTO_TRIVIAL_AUTO_VAR_INIT_ZERO)
CORECRYPTO_TRIVIAL_AUTO_VAR_INIT[config=Debug] = $(CORECRYPTO_TRIVIAL_AUTO_VAR_INIT_PATTERN)

_VLA_WARNINGS_AS_ERRORS_ = -Werror=vla
_VLA_WARNINGS_AS_ERRORS_1 =

_UNINITIALIZED_WARNINGS_AS_ERRORS_YES = -Werror=conditional-uninitialized
_UNINITIALIZED_WARNINGS_AS_ERRORS_NO =
CORECRYPTO_UNINITIALIZED_WARNINGS_AS_ERRORS = YES

_FORMAT_NONLITERAL_WARNINGS_AS_ERRORS_ = -Wformat-nonliteral
_FORMAT_NONLITERAL_WARNINGS_AS_ERRORS_disabled =

WARNINGS_AS_ERRORS = -Werror=conversion -Werror=pointer-arith
WARNINGS_AS_ERRORS = $(inherited) $(_VLA_WARNINGS_AS_ERRORS_$(DISABLE_VLA_WARNINGS_AS_ERRORS))
WARNINGS_AS_ERRORS = $(inherited) $(_UNINITIALIZED_WARNINGS_AS_ERRORS_$(CORECRYPTO_UNINITIALIZED_WARNINGS_AS_ERRORS))
WARNINGS_AS_ERRORS = $(inherited) $(_FORMAT_NONLITERAL_WARNINGS_AS_ERRORS_$(FORMAT_NONLITERAL_WARNINGS_AS_ERRORS))

_UBSAN_OTHER_CFLAGS_YES = -fno-sanitize=alignment,shift,nonnull-attribute -fsanitize=implicit-conversion
UBSAN_OTHER_CFLAGS = $(_UBSAN_OTHER_CFLAGS_$(ENABLE_UNDEFINED_BEHAVIOR_SANITIZER))

OTHER_CFLAGS = $(inherited) -Wcast-qual
OTHER_CFLAGS = $(inherited) -Wno-error=#warnings
OTHER_CFLAGS = $(inherited) -Wno-error=deprecated-declarations
OTHER_CFLAGS = $(inherited) $(CORECRYPTO_TRIVIAL_AUTO_VAR_INIT)
OTHER_CFLAGS = $(inherited) $(WARNINGS_AS_ERRORS)
OTHER_CFLAGS = $(inherited) $(UBSAN_OTHER_CFLAGS)
OTHER_CFLAGS = $(inherited) -fno-typed-cxx-new-delete

LD_GENERATE_MAP_FILE = YES

TRUSTED_EXEC_CFLAGS = -fstack-protector-strong -fsanitize=bounds,object-size,implicit-conversion -fsanitize-trap=all -ftrap-function=__sanitize_trap

SAN_PLATFORM_NAME = ${PLATFORM_NAME}
SAN_PLATFORM_NAME[sdk=embedded*] = ios
SAN_PLATFORM_NAME[sdk=watchos*] = ${PLATFORM_NAME}
SAN_PLATFORM_NAME[sdk=macosx*] = osx

ASAN_LIB_NAME = libclang_rt.asan_${SAN_PLATFORM_NAME}_dynamic.dylib
UBSAN_LIB_NAME = libclang_rt.ubsan_${SAN_PLATFORM_NAME}_dynamic.dylib

DEVICE_BUILT_PRODUCTS_DIR = /private/var/mobile/XcodeBuiltProducts/${PRODUCT_NAME}/${CONFIGURATION}-${PLATFORM_NAME}

// Xcode currently does not have a macro for this (per 31183385)
// Macos is special, it just works and there is not need for inserted dylib
INSERT_ASAN_LIB[sdk=embedded*] = $(DEVICE_BUILT_PRODUCTS_DIR)/$(ASAN_LIB_NAME)
INSERT_UBSAN_LIB[sdk=embedded*] = $(DEVICE_BUILT_PRODUCTS_DIR)/$(UBSAN_LIB_NAME)

INSERT_LIBRARIES[sdk=embedded*] = $(INSERT_ASAN_LIB):$(INSERT_UBSAN_LIB)

RTKIT_ROOT = /usr/local/standalone/RTKit
RTKIT_ROOT[sdk=rtkit*] =

RTKITWIFI_CPU_FLAG[arch=armv7] = -mcpu=cortex-r5
RTKITWIFI_CPU_FLAG[arch=armv7em] = -mcpu=cortex-m7
RTKITWIFI_CPU_FLAG[arch=arm64] = -mcpu=chinook

RTKIT_CPU_FLAG[arch=armv7k] = -mcpu=cortex-a7
RTKIT_CPU_FLAG[arch=arm64] = -mcpu=chinook

CORECRYPTO_ENABLE_BOUNDS_ATTRIBUTES = -fbounds-attributes

